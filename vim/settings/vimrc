"//////////////////////////////////////////////////////////////////////////////////////////////////
"               __   _(_)_ __ ___          _ __ | |__ (_) | |_ _ __
"               \ \ / / | '_ ` _ \  _____ | '_ \| '_ \| | | __| '__|
"                \ V /| | | | | | | _____ | |_) | | | | | | |_| |
"                 \_/ |_|_| |_| |_|       | .__/|_| |_|_|_|\__|_|
"= Initial setup =========================|_|======================================================

  set nocompatible    " Backwards compatibility with Vi is not a priority
  set encoding=utf8   " use UTF-8 encoding for the win
  set hidden          " Don't abandon buffers that are not showing

"= Plug.vim =======================================================================================

  " A minimalist Vim plugin manager.
  " See https://github.com/junegunn/vim-plug for more information

  call plug#begin()

    Plug 'benmills/vimux'                   " Run commands in a tmux split
    Plug 'chrisbra/NrrwRgn'                 " Open a new buffer with the current visual block
    Plug 'christoomey/vim-tmux-navigator'   " Navigate seamlessly between vim and tmux splits
    Plug 'mileszs/ack.vim'                  " Frontend for ack-compatible search tools
    Plug 'philtr/base16-default-vim'        " Base16 default theme for vim
    Plug 'plasticboy/vim-markdown'          " Markdown syntax & utilities
    Plug 'sheerun/vim-polyglot'             " Lazy-loading multi-language pack
    Plug 'thoughtbot/vim-rspec'             " Run RSpec tests with simple commands
    Plug 'tpope/vim-bundler'                " Bundler syntax & utilities
    Plug 'tpope/vim-commentary'             " Easy code commenting
    Plug 'tpope/vim-rails'                  " Rails syntax & utilities
    Plug 'tpope/vim-rake'                   " Rake syntax & utilities
    Plug 'vim-syntastic/syntastic'          " Check buffer for syntax errors when saving

    Plug 'scrooloose/nerdtree'               " Handy folder tree
      \ { 'on': 'NERDTreeToggle' }

    Plug 'ctrlpvim/ctrlp.vim'               " Fuzzy file search within current directory
          \ { 'on': ['CtrlP',
          \          'CtrlPClearAllCaches',
          \          'CtrlPBuffer'] }

  call plug#end()

"= Interface ======================================================================================

  " Appearance ------------------------------------------------------------------------------------

    syntax on                       " turn on syntax highilghting

    filetype plugin on              " enable loading plugins for filetypes
    filetype indent on              " enable loading 'indent files' for filetypes

    set nocursorline                " don't highlight line under cursor
    set synmaxcol=200               " no syntax highlighting for lines longer than 100 cols
    set laststatus=2                " show status bar
    set number                      " display line numbers
    set visualbell                  " use visual bell
    set t_ut=                       " disable background color erase

  " Interaction -----------------------------------------------------------------------------------

    let loaded_match_paren = 1      " highlight matching parens

    set autoread                    " automatically reload unmodified buffers when edited externally
    set ttyfast                     " improve screen refresh for terminal vim
    set lazyredraw                  " screen not redrawn during command execution
    set scrolloff=3                 " start scrolling 3 lines from bottom
    set sidescrolloff=6             " start scrolling 6 lines from right
    set mouse=a                     " allow mouse usage
    set clipboard=unnamed           " use the system clipboard
    set backspace=indent,eol,start  " Make backspace behave as expected
    set re=1                        " Use old RegEx engine because vim-ruby doesn't like it

  " Wrapping --------------------------------------------------------------------------------------

    set nowrap                      " don't softwrap text
    set formatoptions-=t            " don't automatically hardwrap text (use 'gq' to reflow text)
    set textwidth=80                " wrap at column 80
    set wrapmargin=0                " don't wrap based on terminal size

  " Indentation -----------------------------------------------------------------------------------

    set autoindent                  " indent next line to same level as current line
    set smartindent                 "   ↑ but do it smartly
    set smarttab                    " <Tab> in front of a line inserts 'shiftwidth' blanks
    set shiftwidth=2                "   ↑ use 2 blanks for above
    set tabstop=2                   " display a <Tab> as 2 spaces
    set softtabstop=2               " use 2 spaces for a <Tab>
    set expandtab                   "   ↑ insert spaces when <Tab> key is ressed

"= Utilities ======================================================================================

  set nobackup                      " don't create backup files
  set nowb                          " don't make a backup before overwriting a file
  set directory=~/.vim/swap//       " put swap files in ~/.vim/undo/pat%to$file.ext.swp

  set undofile                      " save undo history a file to persist across sessions
  set undodir=~/.vim/undo//         " put undo files in ~/.vim/undo/path%to$file.ext

"= Keys ===========================================================================================

  " Fearless leader!
  let mapleader = ','

  " Tab Navigation
  nmap <Leader>l :tabnext<CR>
  nmap <Leader>h :tabprevious<CR>

  " Folding
  nmap <Leader>F :set foldmethod=syntax<CR>

  " Transpose the line(s) under the cursor one line down
  nmap <Leader>k ddp
  " Transpose the line(s) under the cursor one line up
  nmap <Leader>K ddkP
  " Transpose character(s) under the cursor one position to the right
  nmap <Leader>x xp
  " Transpose character(s) under the cursor one position to the left
  nmap <Leader>X xhP

  " Pry
  nmap <Leader><Leader>pry Irequire "pry"; binding.pry;<CR><Esc>

  " Paste in REPLACE mode
  nmap <Leader>rp R<C-r>"<Esc>

"= Theme ==========================================================================================

  colorscheme base16-default-dark

  set hlsearch                            " highlight all search matches
  set colorcolumn=80,100,120              " visual indicator at columns 80, 100, 120

  set list listchars=tab:██,trail:∙       " Use "██" for tabs and "∙" for trailing spaces
  set fillchars+=vert:                    " set vertical fillchar to "en space" (it's there, trust

  hi StatusLine ctermbg=black ctermfg=yellow

"= Ack ============================================================================================

  if executable("ag")
    let g:ackprg = 'ag --vimgrep'
  endif

"= CtrlP ==========================================================================================

  let g:ctrlp_use_caching = 1           " Remember the files in the current project
  let g:ctrlp_clear_cache_on_exit = 0   " Persist cache across sessions
  let g:ctrlp_switch_buffer = 0         " Always open a new instance of the file.

  " Use the Silver Searcher for globbing files if installed
  if executable("ag")
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g "" '
  end

  nmap <Leader>p :CtrlP<CR>
  nmap <Leader>P :CtrlPClearAllCaches<CR><C-p>
  nmap <Leader>b :CtrlPBuffer<CR>
  nmap <Leader>m :CtrlPMRUFiles<CR>

"= JavaScript =====================================================================================

  au BufRead,BufNewFile *.es6 setf javascript           " Use JavaScript for ECMAScript 6 files

"= NERDTree =======================================================================================

  let NERDTreeMinimalUI=1
  let NERDTreeQuitOnOpen=1
  let NERDTreeAutoDeleteBuffer=1
  let NERDTreeStatusline=' '

  nnoremap <Leader>. :NERDTreeToggle<CR>
  " Turning this off to build muscle memory
  " nnoremap <Leader>n :NERDTreeToggle<CR>

"= Markdown =======================================================================================

  let g:vim_markdown_folding_disabled = 1

  let g:vim_markdown_fenced_languages = [
  \ 'css', 'sass', 'scss',
  \ 'haml', 'html',
  \ 'javascript', 'js=javascript', 'json=javascript',
  \ 'ruby',
  \]

  " Use markdown for *.md files
  autocmd BufRead,BufNewFile *.md setf markdown

"= RSpec.vim ======================================================================================

  " let g:rspec_command = 'VimuxRunCommand "bin/rspec --fail-fast --color {spec}"'
  let g:rspec_command = 'VimuxRunCommand "bundle exec rspec --color --fail-fast {spec}"'

  map <Leader>ss :call RunCurrentSpecFile()<CR>
  map <Leader>sn :call RunNearestSpec()<CR>
  map <Leader>sl :call RunLastSpec()<CR>
  map <Leader>sa :call RunAllSpecs()<CR>

  map <F8> :VimuxRunLastCommand<CR>

"= Ruby/Rails =====================================================================================

  " Search for files within specifc folders
  map <Leader>ra :CtrlP app<CR>
  map <Leader>rj :CtrlP app/assets/javascripts<CR>
  map <Leader>rs :CtrlP app/assets/stylesheets<CR>
  map <Leader>rc :CtrlP app/controllers<CR>
  map <Leader>rm :CtrlP app/models<CR>
  map <Leader>rw :CtrlP app/jobs<CR>
  map <Leader>rx :CtrlP app/services<CR>
  map <Leader>rv :CtrlP app/views<CR>

  " Open spec or source file ("alternate") in same window
  map <Leader>aa :A<CR>
  " Open spec or source file in a vertical split
  map <Leader>av :AV<CR>
  " Open spec or source file in a horizontal split
  map <Leader>as :AS<CR>

  " Fold the ruby method under the cursor (works sometimes)
  nmap <Leader>fm V]Mzf

  au BufRead,BufNewFile *.jbuilder setf ruby            " Use Ruby for .jbuilder files
  au BufRead,BufNewFile *.env.local,*.env.test setf sh  " Use Shell for .env override files

"= Syntastic ======================================================================================

  let g:syntastic_always_populate_loc_list = 1    " Put syntax errors into the location list
  let g:syntastic_auto_loc_list = 0               " Don't pop up the location list on syntax errors
  let g:syntastic_check_on_wq = 0                 " Don't check syntax when quitting
  let g:check_on_open = 0                         " Don't check syntax when opening a file
  let g:syntastic_loc_list_height = 5             " Smaller location list

  " let g:syntastic_ruby_checkers = ['rubocop', 'mri']  " Enable RuboCop for Ruby

  nmap <Leader>sx :SyntasticCheck<CR>
  nmap <Leader>sxt :SyntasticToggleMode<CR>

"= Taskpaper ======================================================================================

  au BufRead,BufNewFile *.taskpaper set nolist
  au BufRead,BufNewFile *.taskpaper set nosmarttab

"= Vimux ==========================================================================================

  map <Leader>vx :VimuxRunCommand "

"==================================================================================================
