"//////////////////////////////////////////////////////////////////////////////////////////////////
"               __   _(_)_ __ ___          _ __ | |__ (_) | |_ _ __
"               \ \ / / | '_ ` _ \  _____ | '_ \| '_ \| | | __| '__|
"                \ V /| | | | | | | _____ | |_) | | | | | | |_| |
"                 \_/ |_|_| |_| |_|       | .__/|_| |_|_|_|\__|_|
"= Initial setup =========================|_|======================================================

  set encoding=utf8   " use UTF-8 encoding for the win
  set hidden          " Don't abandon buffers that are not showing

"= Plugins =======================================================================================

  call plug#begin()

    "== UI and themes
      Plug 'jeffkreeftmeijer/vim-dim'

    "== Utilities
      Plug 'benmills/vimux'
      Plug 'chrisbra/NrrwRgn'
      Plug 'christoomey/vim-tmux-navigator'
      Plug 'tpope/vim-commentary'
      Plug 'vim-test/vim-test'
      Plug 'mileszs/ack.vim'
      Plug 'tpope/vim-fugitive'

      " Telescope
      " Plug 'nvim-telescope/telescope.nvim' | Plug 'nvim-lua/plenary.nvim'
      " Plug 'nvim-telescope/telescope-file-browser.nvim'
      " Plug 'nvim-telescope/telescope-frecency.nvim' | Plug 'tami5/sqlite.lua'
      " Plug 'nvim-telescope/telescope-fzf-native.nvim', {'do': 'make'}

    "== LSP/Autocomplete/Syntax
      " Plug 'neovim/nvim-lspconfig'

      " Plug 'hrsh7th/nvim-cmp'
      " Plug 'hrsh7th/cmp-nvim-lsp'
      " Plug 'hrsh7th/cmp-buffer'
      " Plug 'hrsh7th/cmp-path'
      " Plug 'hrsh7th/cmp-cmdline'
      " Plug 'hrsh7th/vim-vsnip'

      " Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

      " Plug 'mhanberg/elixir.nvim'

      " Plug 'tpope/vim-rails'
      " Plug 'sheerun/vim-polyglot'
      " Plug 'plasticboy/vim-markdown'

  call plug#end()

"= Appearance ===================================================================================

  set background=dark
  colorscheme dim
  highlight Comment cterm=italic gui=italic

  syntax on                           " turn on syntax highilghting

  filetype plugin on                  " enable loading plugins for filetypes
  filetype indent on                  " enable loading 'indent files' for filetypes

  set nocursorline                    " don't highlight line under cursor
  set synmaxcol=800                   " no syntax highlighting for lines longer than 100 cols
  set laststatus=0                    " don't show status bar
  set nonumber                        " don't display line numbers
  set visualbell                      " use visual bell
  set t_ut=                           " disable background color erase
  set hlsearch                        " highlight all search matches

  set list listchars=tab:██,trail:∙   " Use "██" for tabs and "∙" for trailing spaces
  set fillchars+=vert:                " set vertical fillchar to "en space"

"= Interaction ==================================================================================

  set autoread                    " automatically reload unmodified buffers when edited externally
  set ttyfast                     " improve screen refresh for terminal vim
  set lazyredraw                  " screen not redrawn during command execution
  set scrolloff=3                 " start scrolling 3 lines from bottom
  set sidescrolloff=6             " start scrolling 6 lines from right
  set mouse=a                     " allow mouse usage
  set clipboard=unnamed           " use the system clipboard
  set backspace=indent,eol,start  " Make backspace behave as expected
  set re=0                        " Let vim decide which regexpengine to use

"= Wrapping =====================================================================================

  set nowrap                      " don't softwrap text
  set formatoptions-=t            " don't automatically hardwrap text (use 'gq' to reflow text)
  set textwidth=80                " wrap at column 80
  set wrapmargin=0                " don't wrap based on terminal size

"= Indentation ==================================================================================

  set autoindent                  " indent next line to same level as current line
  set smarttab                    " <Tab> in front of a line inserts 'shiftwidth' blanks
  set shiftwidth=2                "   ↑ use 2 blanks for above
  set tabstop=2                   " display a <Tab> as 2 spaces
  set softtabstop=2               " use 2 spaces for a <Tab>
  set expandtab                   "   ↑ insert spaces when <Tab> key is ressed

"= Utilities ======================================================================================

  set nobackup                      " don't create backup files
  set nowb                          " don't make a backup before overwriting a file
  set noswapfile                    " don't use swap files

  set undofile                            " save undo history a file to persist across sessions
  set undodir=~/.local/share/nvim/undo/   " save undo files here

"= Keys ===========================================================================================

  " Fearless leader!
  let mapleader = ','

  " Use same pane navigation shortcuts in terminal split
  tnoremap <silent> <C-h> <C-w><C-h>
  tnoremap <silent> <C-j> <C-w><C-j>
  tnoremap <silent> <C-k> <C-w><C-k>
  tnoremap <silent> <C-l> <C-w><C-l>

  " Use arrow keys to resize windows
  noremap <up>    <C-W>+
  noremap <down>  <C-W>-
  noremap <left>  3<C-W><
  noremap <right> 3<C-W>>

  " Tab Navigation
  nmap <Leader>l :tabnext<CR>
  nmap <Leader>h :tabprevious<CR>

  " Transpose the line(s) under the cursor one line down
  nmap <Leader>k ddp
  " Transpose the line(s) under the cursor one line up
  nmap <Leader>K ddkP
  " Transpose character(s) under the cursor one position to the right
  nmap <Leader>x xp
  " Transpose character(s) under the cursor one position to the left
  nmap <Leader>X xhP


"= Ack ============================================================================================

  if executable("rg")
    let g:ackprg = 'rg --vimgrep --no-heading --no-messages'
  elseif executable("ag")
    let g:ackprg = 'ag --vimgrep'
  endif

"= Markdown =======================================================================================

  let g:vim_markdown_folding_disabled = 1

  let g:vim_markdown_fenced_languages = [
  \ 'css', 'sass', 'scss',
  \ 'haml', 'html',
  \ 'javascript', 'js=javascript', 'json=javascript',
  \ 'ruby',
  \ 'elixir'
  \]

  " Use 2 spaces for list item indents
  let g:vim_markdown_new_list_item_indent = 2

  augroup Markdown
    " Use markdown for *.md files
    autocmd BufRead,BufNewFile *.md setf markdown
  augroup END

"= Ruby/Rails =====================================================================================

  let g:ruby_path = $HOME.'/.asdf/shims/ruby'
  let g:ruby_indent_assignment_style = 'variable'

  augroup Rails
    au BufRead,BufNewFile *.jbuilder setf ruby    " Use Ruby for .jbuilder files
    au BufRead,BufNewFile .env.local,.env.development,.env.test setf sh   " Use Shell for .env files
  augroup END

"= Testing ========================================================================================

  let test#strategy="vimux"

  map <Leader>ss :TestFile<CR>
  map <Leader>sn :TestNearest<CR>
  map <Leader>sl :TestLast<CR>
  map <Leader>sa :TestSuite<CR>

"= Vimux ==========================================================================================

  let g:VimuxHeight = "20"

  map <Leader>vr :VimuxRunCommand ""<Left>
  map <Leader>vv :VimuxRunLastCommand<CR>
  map <Leader>vt :VimuxTogglePane<CR>

"= Lua Config =====================================================================================

" lua << EOF
" require('elixir').setup()
" -- Mappings.
" -- See `:help vim.diagnostic.*` for documentation on any of the below functions
" local opts = { noremap=true, silent=true }
" vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
" vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
" vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
" vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)
" 
" -- Use an on_attach function to only map the following keys
" -- after the language server attaches to the current buffer
" local on_attach = function(client, bufnr)
"   -- Enable completion triggered by <c-x><c-o>
"   vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
" 
"   -- Mappings.
"   -- See `:help vim.lsp.*` for documentation on any of the below functions
"   local bufopts = { noremap=true, silent=true, buffer=bufnr }
"   vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
"   vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
"   vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
"   vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
"   vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
"   vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
"   vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
"   vim.keymap.set('n', '<space>wl', function()
"     print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
"   end, bufopts)
"   vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
"   vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)
"   vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
"   vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)
"   vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
" end
" 
" local lsp_flags = {
"   -- This is the default in Nvim 0.7+
"   debounce_text_changes = 150,
" }
" 
" require('lspconfig')['elixir'].setup{
"     on_attach = on_attach,
"     flags = lsp_flags,
" }
" 
" require('nvim-treesitter.configs').setup {
"   ensure_installed = { "ruby", "elixir", "javascript" },
"   auto_install = true,
"   highlight = {
"     enable = true
"   }
" }
" 
" require('telescope').setup{
"   defaults = {
"     -- Default configuration for telescope goes here:
"     -- config_key = value,
"     mappings = {
"       i = {
"         -- map actions.which_key to <C-h> (default: <C-/>)
"         -- actions.which_key shows the mappings for your picker,
"         -- e.g. git_{create, delete, ...}_branch for the git_branches picker
"         ["<C-h>"] = "which_key"
"       }
"     },
"   },
"   pickers = {
"     -- Default configuration for builtin pickers goes here:
"     -- picker_name = {
"     --   picker_config_key = value,
"     --   ...
"     -- }
"     -- Now the picker_config_key will be applied every time you call this
"     -- builtin picker
"   },
"   extensions = {
"     -- Your extension configuration goes here:
"     -- extension_name = {
"     --   extension_config_key = value,
"     -- }
"     -- please take a look at the readme of the extension you want to configure
"     file_browser = {
"       dir_icon = "▶"
"     },
"     fzf = {
"       fuzzy = true,                    -- false will only do exact matching
"       override_generic_sorter = true,  -- override the generic sorter
"       override_file_sorter = true,     -- override the file sorter
"       case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
"                                        -- the default case_mode is "smart_case"
"     }
"   }
" }
" 
" require("telescope").load_extension("file_browser")
" require("telescope").load_extension("frecency")
" require("telescope").load_extension("fzf")
" 
" vim.keymap.set('n', '<Leader>p', '<cmd>Telescope find_files<CR>')
" vim.keymap.set('n', '<Leader>m', '<cmd>Telescope frecency<CR>')
" vim.keymap.set('n', '<Leader>b', '<cmd>Telescope buffers<CR>')
" vim.keymap.set('n', '<Leader>gr', '<cmd>Telescope live_grep<CR>')
" vim.keymap.set('n', '<Leader>tt', '<cmd>Telescope file_browser<CR>')
" 
" EOF
